***************输出结果[Result.dat]*********************
Result
Solution status	Optimal                 // 问题状态 : Optimal
Solution value	1.16862e+006		// 计算所得结果
Solution time	99.7314			// 计算用时
EpGap	0.001				// 对偶间隙
allFuelCost	1.16266e+006		// 最低费用

// 火电机组状态
outf<<"state"<<endl;
for(t=1;t<cycle+1;t++){
	for(i=0;i<thUnitNum;i++){
		if(cplex.getValue(state[i][t])<_INF)
			outf<<"0\t";
		else
			outf<<cplex.getValue(state[i][t])<<"\t";
	}
	outf<<endl;        
}

// 火电机组出力
outf<<endl<<"thermalPower"<<endl;
for(t=1;t<cycle+1;t++){
	for(i=0;i<thUnitNum;i++){
		if(cplex.getValue(thermalPower[i][t])<_INF)
			outf<<"0\t";
		else
			outf<<cplex.getValue(thermalPower[i][t])<<"\t";
	}
	outf<<endl;

}

// 火电机组提供备用
outf<<endl<<"thermalR"<<endl;
for(t=1;t<cycle+1;t++){
	for(i=0;i<thUnitNum;i++){
		if(cplex.getValue(thermalR[i][t])<1e-7)
			outf<<"0\t";
		else
			outf<<cplex.getValue(thermalR[i][t])<<"\t";
	}
	outf<<endl;
}



// 线路潮流结果
outf<<"current[l][t]"<<endl;
double current[100][200];
for (t = 1; t < cycle+1; t++){				 		 
	for(l= 0; l< lineNum; l++){
		double gamap=0;
		for (i = 0; i < thUnitNum; i++){
			gamap+=gama[l][unitLocation[i]-1]*cplex.getValue(thermalPower[i][t]);
		}
		double gamaD=0;
		for (d = 0; d < demandNum; d++){
			gamaD+=gama[l][demandLocation[d]-1]*sysDemand[t]*demand[d];
		} 
		current[l][t]=gamap-gamaD;	
		outf<<current[l][t]<<"\t";
	}
outf<<endl;
}